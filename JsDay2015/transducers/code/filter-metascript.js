var R, fs, inspect, log, filename, input, isGet, notStatic, isPage, splitLine, toURL, transformSecondItem, secondItemToUrl, secondItemToUrlUsingZip, processor, result, _$0, _$1;
_$0: {
    _$1: {
        R = require('ramda');
        fs = require('fs');
        inspect = require('util').inspect;
    }
    log = R.curry(function (m, v) {
        var _$2, _$3;
        _$3: {
            console.log('LOG ' + m + ':' + inspect(v));
            _$2 = v;
            break _$3;
        }
        return _$2;
    });
    filename = require('process').argv[2] || 'data-small.log';
    console.time('All');
    input = fs.readFileSync(filename, { 'encoding': 'utf8' });
    isGet = R.test(new RegExp('GET \\/'));
    notStatic = function (__$arg$1) {
        return !R.test(new RegExp('GET \\/static'), __$arg$1);
    };
    isPage = function (__$arg$1) {
        return isGet(__$arg$1) && notStatic(__$arg$1);
    };
    splitLine = function (__$arg$1) {
        var pattern, m, _$2, _$3, _$4, _$5;
        _$3: {
            pattern = '^([0-9\\.]+)[^"]+"([^"]+)/';
            m = __$arg$1.match(new RegExp(pattern));
            if (m !== null) {
                _$5: {
                    m.shift();
                    _$4 = m;
                    break _$5;
                }
            } else {
                _$4 = null;
            }
            _$2 = _$4;
            break _$3;
        }
        return _$2;
    };
    toURL = function (__$arg$1) {
        return R.prepend('http://my-domain.com', __$arg$1.split(' ').slice(1, 2)).join('');
    };
    transformSecondItem = R.curry(function (f, pair) {
        return [
            pair[0],
            f(pair[1])
        ];
    });
    secondItemToUrl = transformSecondItem(toURL);
    secondItemToUrlUsingZip = R.pipe(R.zip([
        R.identity,
        toURL
    ]), R.map(function (pair) {
        return pair[0](pair[1]);
    }));
    processor = function (__$arg$1) {
        return R.filter(isGet, __$arg$1.split('\n')).map(splitLine).map(secondItemToUrl).map(R.join(' visited ')).map(function (__$arg$1) {
            return __$arg$1 + '\n';
        });
    };
    console.time('Processing');
    result = R.join('', processor(input));
    console.timeEnd('Processing');
    console.timeEnd('All');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbHRlci1tZXRhc2NyaXB0Lm1qcyJdLCJuYW1lcyI6WyJSIiwicmVxdWlyZSIsImZzIiwiaW5zcGVjdCIsImxvZyIsImN1cnJ5IiwibSIsInYiLCJjb25zb2xlIiwiXyQyIiwiZmlsZW5hbWUiLCJhcmd2IiwidGltZSIsImlucHV0IiwicmVhZEZpbGVTeW5jIiwiaXNHZXQiLCJ0ZXN0IiwiUmVnRXhwIiwibm90U3RhdGljIiwiX18kYXJnJDEiLCJpc1BhZ2UiLCJzcGxpdExpbmUiLCJwYXR0ZXJuIiwibWF0Y2giLCJudWxsIiwic2hpZnQiLCJfJDQiLCJ0b1VSTCIsInByZXBlbmQiLCJzcGxpdCIsInNsaWNlIiwiam9pbiIsInRyYW5zZm9ybVNlY29uZEl0ZW0iLCJmIiwicGFpciIsInNlY29uZEl0ZW1Ub1VybCIsInNlY29uZEl0ZW1Ub1VybFVzaW5nWmlwIiwicGlwZSIsInppcCIsImlkZW50aXR5IiwibWFwIiwicHJvY2Vzc29yIiwiZmlsdGVyIiwicmVzdWx0IiwidGltZUVuZCJdLCJtYXBwaW5ncyI6IkFBQUEsSSxDQUFBLEUsRUFBQSxFLE9BQUEsRSxHQUFBLEUsUUFBQSxFLEtBQUEsRSxLQUFBLEUsU0FBQSxFLE1BQUEsRSxTQUFBLEUsS0FBQSxFLG1CQUFBLEUsZUFBQSxFLHVCQUFBLEUsU0FBQSxFLE1BQUEsRSxHQUFBLEUsR0FBQSxDO0FBQUE7QUFBQTtBQUFBLFFBQ0VBLENBQUUsR0FBRUMsT0FBTyxTQUFULENBREo7QUFBQSxRQUVFQyxFQUFHLEdBQUVELE9BQU8sTUFBVCxDQUZMO0FBQUEsUUFHRUUsT0FBUSxHQUFFRixPQUFPLFFBQVEsQ0FBQ0UsT0FBbEIsQ0FIVjtBQUFBO0FBQUEsSUFLQUMsR0FBUSxHQUFFSixDQUFDLENBQUNLLEtBQ1YsV0FBQUMsQ0FBQSxFQUFFQyxDQUFGO0FBQUEsWSxHQUFBLEUsR0FBQTtBQUFBLFFBQ0U7QUFBQSxZQUFBQyxPQUFPLENBQUNKLEdBQUcsQ0FBQyxNQUFPLEdBQUVFLENBQUUsR0FBRSxHQUFk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QUFDbUIsR0FBSSxDQUFBTCxlQUFBLENBQ0wsQ0FBQ0ssR0FBRyxDQUFDeEMsQ0FBQyxDQUFDK0IsSUFBSCxDQUFPLFdBQVAsRUFDSixDQUFDUyxHQUFHLFdBQUFyQixRQUFBO0FBQUEsbUJBQUtBLFFBQUksR0FBRSxJQUFYO0FBQUEsVUFOTztBQUFBLEtBQUYsQ0ExQ2Q7QUFBQSxJQW1EQVgsT0FBTyxDQUFDSSxJQUFJLGVBbkRaO0FBQUEsSUFvREErQixNQUFXLEdBQUUzQyxDQUFDLENBQUMrQixJQUFJLEtBQUtVLFNBQVMsQ0FBQTVCLEtBQUEsQ0FBZCxDQUFSLENBcERYO0FBQUEsSUFzREFMLE9BQU8sQ0FBQ29DLE9BQU8sZUF0RGY7QUFBQSxJQXVEQXBDLE9BQU8sQ0FBQ29DLE9BQU8sUUF2RGY7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbInZhclxuICBSID0gcmVxdWlyZSgncmFtZGEnKVxuICBmcyA9IHJlcXVpcmUoJ2ZzJylcbiAgaW5zcGVjdCA9IHJlcXVpcmUoJ3V0aWwnKS5pbnNwZWN0XG5cbnZhciBsb2cgPSBSLmN1cnJ5XG4gIChtLCB2KSAtPlxuICAgIGNvbnNvbGUubG9nKCdMT0cgJyArIG0gKyAnOicgKyBpbnNwZWN0KHYpKVxuICAgIHZcblxudmFyIGZpbGVuYW1lID0gcmVxdWlyZSgncHJvY2VzcycpLmFyZ3ZbMl0gfHwgJ2RhdGEtc21hbGwubG9nJ1xuXG5jb25zb2xlLnRpbWUoJ0FsbCcpXG52YXIgaW5wdXQgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUsIHtlbmNvZGluZzogJ3V0ZjgnfSlcblxudmFyIGlzR2V0ID0gUi50ZXN0KG5ldyBSZWdFeHAgJ0dFVCBcXFxcLycpXG52YXIgbm90U3RhdGljID0gIy0+ICEgKFIudGVzdChuZXcgUmVnRXhwICdHRVQgXFxcXC9zdGF0aWMnLCAjaXQpKVxudmFyIGlzUGFnZSA9ICMtPiAoaXNHZXQgI2l0KSAmJiAobm90U3RhdGljICNpdClcblxudmFyIHNwbGl0TGluZSA9ICMtPlxuICB2YXIgcGF0dGVybiA9ICdeKFswLTlcXFxcLl0rKVteXCJdK1wiKFteXCJdKykvJ1xuICB2YXIgbSA9ICNpdC5tYXRjaCAobmV3IFJlZ0V4cCBwYXR0ZXJuKVxuICBpZiAobSAhPSBudWxsKSBkb1xuICAgIG0uc2hpZnQoKVxuICAgIG1cbiAgZWxzZSBudWxsXG5cbnZhciB0b1VSTCA9ICMtPiB8OlxuICAgICNpdC5zcGxpdCgnICcpXG4gICAgIy5zbGljZSgxLCAyKVxuICAgIFIucHJlcGVuZCgnaHR0cDovL215LWRvbWFpbi5jb20nLCAjKVxuICAgICMuam9pbiAnJ1xuXG52YXIgdHJhbnNmb3JtU2Vjb25kSXRlbSA9IFIuY3VycnlcbiAgKGYsIHBhaXIpIC0+IFtwYWlyWzBdLCBmKHBhaXJbMV0pXVxudmFyIHNlY29uZEl0ZW1Ub1VybCA9IHRyYW5zZm9ybVNlY29uZEl0ZW0odG9VUkwpO1xuXG52YXIgc2Vjb25kSXRlbVRvVXJsVXNpbmdaaXAgPSBSLnBpcGVcbiAgUi56aXAoW1IuaWRlbnRpdHksIHRvVVJMXSlcbiAgUi5tYXAoIChwYWlyKSAtPiBwYWlyWzBdIChwYWlyWzFdKSlcblxuXG52YXIgcHJvY2Vzc29yID0gIy0+IHw6XG4gICAgI2l0LnNwbGl0KCdcXG4nKVxuICAgIFIuZmlsdGVyKGlzR2V0LCAjKVxuICAgICMubWFwIHNwbGl0TGluZVxuICAgICMubWFwIHNlY29uZEl0ZW1Ub1VybFxuICAgICMubWFwKFIuam9pbignIHZpc2l0ZWQgJykpXG4gICAgIy5tYXAoIy0+ICNpdCArICdcXG4nKVxuXG5cbmNvbnNvbGUudGltZSgnUHJvY2Vzc2luZycpO1xudmFyIHJlc3VsdCA9IFIuam9pbignJywgcHJvY2Vzc29yKGlucHV0KSlcbjsgdmFyIHJlc3VsdCA9IFIuaW50bygnJywgUi5pZGVudGl0eSwgcHJvY2Vzc29yKGlucHV0KSk7XG5jb25zb2xlLnRpbWVFbmQoJ1Byb2Nlc3NpbmcnKVxuY29uc29sZS50aW1lRW5kKCdBbGwnKVxuXG47IGNvbnNvbGUubG9nIChyZXN1bHQpXG5cbiJdfQ==