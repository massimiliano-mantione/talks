link(rel="stylesheet", href="assets/style.css")
link(rel="stylesheet", href="assets/highlight.css")

script(src="assets/highlight.min.css")
script
  function startTime() {
    var today=new Date();
    var h=today.getHours();
    var m=today.getMinutes();
    m = checkTime(m);
    document.getElementById('clock').innerHTML = h+" "+m;
    var t = setTimeout(function(){startTime()},500);
  }
  function checkTime(i) {
    if (i<10) {i = "0" + i};  // add zero in front of numbers < 10
    return i;
  }
  function prepareClock() {
    var clock = document.getElementById('clock');
    var body = clock.parentNode.parentNode.parentNode;
    clock = clock.parentNode.removeChild(clock);
    body.appendChild(clock);
    startTime();
  }
body(onload="prepareClock()")
  div.myclock(id="clock")
  

section
  div.logo
    img(src='assets/react-logo-white.svg', alt='react logo')
  p.cem ReactJsDay 2015
  h2 What the Flux?
  h1 Let's Redux!
  p.dateStyle October 30 2015, Verona
  p.cem Massimiliano Mantione

section
  section
    h1 Credits
    p.fragment
      | Henrik Joreteg
      br
      em
        a(href='https://blog.andyet.com/2015/08/06/what-the-flux-lets-redux') (for the title)
    p.fragment
      | André Staltz
      br
      em
        a(href='http://staltz.com/unidirectional-user-interface-architectures.html') (for Cycle, the insight, and graphs)
    p.fragment
      | Mark
      br
      em
        a(href='https://medium.com/@meagle/understanding-87566abcfb7a') (for insight and other graphs)
    p.fragment
      | Dan Abramov
      br
      em
        a(href='https://www.youtube.com/watch?v=xsSnOQynTHs') (for Redux!)
  
  section
    h3 BTW
    h1.fragment
      veryBig
        b.cem We are hiring!
      div(style="height:20vh;background:url(assets/hf-logo.png);background-size:contain;background-repeat:no-repeat;background-position:center;")
    p.fragment.embox.roll-in
      | Come and talk to me
      br
      em
        | or email 
        span.cem jobs@hyperfair.com

  section
    p.cem We do this
    video(style="height:80vh",autoplay="autoplay",loop="loop",muted="muted")
      source(src="assets/hf-montage.webm",type="video/webm")

section
  section
    h1 About Myself
    h2.fragment An enthusiast software engineer
    p.fragment Passionate about languages and compilers
    p.fragment.roll-in <b>Worked in the V8 team in Google</b>
    p.fragment Overall, worked on JIT compilers for +7 years
    p
      em.fragment Now working for
      div.fragment(style="height:20vh;background:url(assets/hf-logo.png);background-size:contain;background-repeat:no-repeat;background-position:center;")

  section
    h1 Javascript and me
    p.fragment I started as a Javascript hater
    blockquote.fragment.embox.roll-in
      | When I sow Javascript for the 1st time (in 1995)
      | I vowed that I would never touch such an abomination,
      | even with a 10 feet pole
    p.fragment Eventually, I changed my mind, but...
    p.fragment
      em Back to the actual topic!

section
  section
    h3 Talk topics
    h2.fragment
      span.cem React
    em.fragment (you should know about it)
    h2.fragment
      span.cem Flux
    em.fragment (you should have heard about it)
    h2.fragment
      span.cem Redux
    em.fragment (we will explain this)


  section
    h1 Why React?
    p.fragment.embox.roll-in ...you should already know!
    p.fragment
      em After all you are here today

  section
    h2 The benefits of React
    p.fragment View is a pure function of the "model"
    p.fragment No markup language, just code
    p.fragment
      em
        | view is really a 
        b function
        |  of the model
    p.fragment
      | Performance
      br
      em (thanks to the shadow DOM)

  section
    h3 What about
    h2 data binding?
    p.fragment The view is a function of the model
    p.fragment Changes in the model are reflected in the view
    p.fragment This looks like "one way" data binding
    p.fragment
      em Isn't this poor?
    p.fragment.embox.roll-in Would two way be better?

  section
    h2 Two way data binding...
    p.fragment
      b ...is cool at first!
    p.fragment.cem It works like magic
    p.fragment.embox.roll-in But when it fails, it fails in mysterious ways

  section
    h3 Two way
    h1
      span.cem Data binding
    p.fragment A two way data binding MVC framework does two things to the model
    h2.fragment
      span.cem change detection
    p.fragment
      em usually automagical
    p.fragment
      em triggers change events
    h2.fragment
      span.cem change injection
    p.fragment
      em which should not be detected!
    p.fragment.embox.roll-in
      em soon the dynamic behavior of your code is a jungle of events

  section
    h2 You start thinking like this
    div(style="height:60vh;background:url(assets/model-view-unidir.png);background-size:contain;background-repeat:no-repeat;background-position:center;")

  section
    h2 But it works like this
    div(style="height:60vh;background:url(assets/model-view-multipath.png);background-size:contain;background-repeat:no-repeat;background-position:center;")
    p.cem.fragment.embox.roll-in Facebook has been bitten by this!

  section
    h2 One way data flow
    p.fragment.cem
      veryBig Flux
    p.fragment
      em It works like this

  section
    div(style="height:80vh;background:url(assets/flux-unidir-ui-arch.jpg);background-size:contain;background-repeat:no-repeat;background-position:center;")

section
  section
    h2 What's wrong
    h1 with Flux?
    p.fragment Flux as a concept is great
    p.fragment.embox.roll-in but the reference implementation from Facebook leaves a lot to be desired

  section
    h3 Flux issue:
    h1 Stores are singletons
    p.fragment Server-side rendering is possible but overcomplicated
    p.fragment.embox.roll-in (harder to separate data for different requests on the server)

  section
    h3 Flux issue:
    h1 Multiple isolated stores
    p.fragment Sharing code for common functionality, like pagination, is possible but overcomplicated

  section
    h3 Flux issue:
    h1 Developer Experience
    p.fragment
      | Editing stores breaks hot reloading
      br
      em (the store content is lost)
    p.fragment Implementing an undo-redo debugger (time traveling) is hard

  section
    h3 Flux issue:
    h1 Poor extensibility
    p.fragment
      em (at the framework level)
    p.fragment No hooks for third party extensions
    p.fragment.embox.roll-in Example: a logging extension would need to be aware of every store, and subscribe to each separately


section
  section
    h2 Enter
    p.fragment.cem
      veryBig Redux
    p.fragment
      em It works like this

  section
    div(style="height:80vh;background:url(assets/redux-unidir-ui-arch.jpg);background-size:contain;background-repeat:no-repeat;background-position:center;")

  section
     p.fragment.embox.roll-in Let's see some code

section
  section
    h1 What about async?
    p.fragment.embox.roll-in Flux is synchronous
    p.fragment
      b And for good reason!
    p.fragment
      em However, real world applications
      br
      em need asynchronous interactions
    p.cem.fragment Let's reason about it
    
  section
    h3 Dialogues are
    h1 asynchronous
    p.fragment In a dialogue, there are two subjects
    p.fragment Each subject uses two async channels
    ul
      li.fragment one for receiving
      li.fragment one for transmitting
    p.fragment.embox.roll-in
      | The user and the application have a conversation using the 
      em window
      |  and the 
      em input devices
      | .
  
  section
    div(style="height:80vh;background:url(assets/mvi-unidir-ui-arch.jpg);background-size:contain;background-repeat:no-repeat;background-position:center;")
  
  section
    h3 Things are
    h1 more complex
    p.fragment The typical application does not have only the user as counterpart
    p.fragment
      | Actually, the application is often a 
      em middle man
      | , having symultaneous dialogues with:
    ul
      li.fragment the user
      li.fragment other remote services
    p.fragment.embox.roll-in Let's see how this works with Redux

  section
    div(style="height:80vh;background:url(assets/ReduxAsync.png);background-size:contain;background-repeat:no-repeat;background-position:center;")
  
  section
    h2 Middleware
    h3 is the key
    p.fragment In Redux, middleware plugins are higher order functions
    p.fragment
      | They take a 
      b store
      |  (a 
      em dispatch
      |  and a 
      em getState
      |  function)
    p.fragment
      | ...and return a function that is supposed to be chained with other middleware (it receives the 
      em next
      |  middleware to invoke)...
    p.fragment
      | ...and in turn wraps the actual middleware action (that wraps the 
      em user
      |  action)!

  section
    h2 The thunk middleware
    pre.codebox.fragment
      code.codesmall.javascript
        = 'export default function thunkMiddleware({ dispatch, getState }) {\n'
        = '  return next =>\n'
        = '     action =>\n'
        = '       typeof action === ‘function’ ?\n'
        = '         action(dispatch, getState) :\n'
        = '         next(action);\n'
        = '}'

  section
    h2 An async action
    pre.codebox.fragment
      code.codesmall.javascript
        = 'function fetchPosts(reddit) {\n'
        = '  return dispatch => {\n'
        = '    dispatch(requestPosts(reddit));\n'
        = '    return fetch(`http://www.reddit.com/r/${reddit}.json`)\n'
        = '      .then(response => response.json())\n'
        = '      .then(json => dispatch(receivePosts(reddit, json)));\n'
        = '  };\n'
        = '}'

  section
     p.fragment.embox.roll-in Let's see some more code

section
  section
    h3 In the end...
    p.fragment.cem
      veryBig Why redux?

  section
    h3 Why Redux?
    h1 Reducer Composition
    p.fragment Redux has a single store, but reducers can be combined
    p.fragment Different reducers can handle
    ul
      li.fragment different parts of the model
      li.fragment
        | different application concerns
        br
        em.fragment pagination
        |  
        em.fragment undo-redo

  section
    h3 Why Redux?
    h1 Server side rendering
    p.fragment Executing reducers on the server is trivial
    p.fragment Just feed them an initial state and a few actions
    p.fragment Then you have your model and you can invoke render on it

  section
    h3 Why Redux?
    h1 Developer Experience
    p.fragment Reducer code is disentangled from the store state
    p.fragment Therefore it can be changed at run time (hot reloading)
    p.fragment Since the state is immutable, we can keep copies of it over time and have a time-traveling debugger

  section
    h3 Why Redux?
    h1 Ecosystem
    p.fragment Clever use of middleware as extension point, enabling:
    p.fragment
      em logging
    p.fragment
      em persistence
    p.fragment
      em immutability checks
    p.fragment
      em routing
    p.fragment
      em asynchronous actions
      br
      em (plain, promises, observables)

  section
    h3 Why Redux?
    h1 Redux is like Flux
    p.fragment All the benefits of Flux
    p.fragment
      em recording and replaying of actions
    p.fragment
      em unidirectional data flow
    p.fragment
      em dependent mutations

  section
    h3 Why Redux?
    h1 Redux evolves Flux
    p.fragment
      b Adding
    p.fragment
      em easy undo-redo
    p.fragment
      em hot reloading
    p.fragment
      em time traveling debugger
    p.fragment
      b Removing
    p.fragment
      em dispatcher
    p.fragment
      em store registration

  section
    h3 Why Redux?
    h1 Simplicity
    p.fragment Tiny API surface
    p.fragment Core code (removing warnings and sanity checks) is 99 lines
    p.fragment
      | No tricky async code
      br
      em (confined to middleware)
    p.fragment You can actually read it all!

section
  section
    h1 That's All, Folks
    p code, docs and slides are on github
    p twitter: @M_a_s_s_i, #metascript
    h2 Thanks for following!

  section
    h3 BTW
    h1.fragment
      veryBig
        b.cem We are hiring!
      div(style="height:20vh;background:url(assets/hf-logo.png);background-size:contain;background-repeat:no-repeat;background-position:center;")
    p.fragment.embox.roll-in
      | Come and talk to me
      br
      em
        | or email 
        span.cem jobs@hyperfair.com
