link(rel="stylesheet", href="assets/style.css")
link(rel="stylesheet", href="assets/highlight.css")
script(src="assets/highlight.min.css")

section
  div.futurelogo
  h1
    veryBig Metascript
  h2 going beyond Javascript limitations
  p.dateStyle May 2 2014, Barcelona
  p Massimiliano Mantione


section
  h1 About Myself
  h2.fragment An enthusiast software engineer
  p.fragment Passionate about languages and compilers
  p.fragment Worked in the V8 team in Google (Javascript VM)
  p.fragment Overall, worked on JIT compilers for +7 years
  p.fragment
    | Now working on scalable, fault tolerant,
    br
    | web facing distributed systems

section
  h1 What's the Problem with Javascript?
  p.fragment Too many to mention
  p.fragment Convertion rules can kick in with <em>WAT?</em> results
  p.fragment Forgetting a variable declaration can be catastrophic
  p.fragment Lack of proper block-scoping (until ES6)
  p.fragment Verbose <em>Java-like</em> syntax
  p.fragment No type system, language is not extensible...


section
  h1 Metascript features
  p.fragment Real metaprogramming <em>(like Clojurescript)</em>
  p.fragment Optionally, immutable structures <em>(<u>from</u> Clojurescript)</em>
  p.fragment Clean syntax <em>(like Coffeescript)</em>
  p.fragment Sane scoping rules <em>(like ES6 <b>let</b>)</em>
  p.fragment Optionally, a type system <em>(like Typescript)</em> <b>[WIP!]</b>
  p.fragment Zero runtime overhead
  p.fragment Be a <em><u>Good Javascript Citizen</u></em>



section
  h1 A Taste of<br/>
    veryBig Metascript!
  p Our all-time favorite first program:
  pre.codebox
    code.javascript.
      console.log 'Hello, Metascript!'
section
  h1 Simple Expressions
  p ...<em>Just Work!</em>
  pre.codebox
    code.javascript.
      (1 + 2 * 3).should.equal 7

      ('a' + 'b' + 'c').should.equal "abc"

      (typeof (1 + 2)).should.equal 'number'

      (typeof {}).should.equal 'object'

section
  h1 Look, Ma, No Statements...
  p ...<em>Just Expressions!</em>
  pre.codebox
    code.javascript.
      (if true 1 else 2).should.equal 1

      (do
        var a = 'a'
        a = a + a
        a
      ).should.equal 'aa'


section
  h1 Loops Are Statements, Too
  pre.codebox
    code.javascript.
      var fact = (x) ->
        loop (var r = 1, x)
          if (x > 0)
            next (r * x, x - 1)
          else
            r

      fact(1).should.equal(1)
      fact(5).should.equal(5 * 4 * 3 * 2 * 1)


section
  h1 Metaprogramming in action

section
  h1 Useful macros
  p.fragment Simple operators (<b>@</b>, <b>?</b>, <b>??</b>, <b>.?</b>)
  p.fragment Smarter function definitions
  p.fragment Destructuring assignment and matching
  p.fragment Monadic sequencing, which means...
  p.fragment <b>async</b> programming facilities!
  p.fragment Promises <b>and</b> rx.js <u>syntactic support!</u>

section
  h1 What this means...
  p.fragment ES7 will likely have async for Promises
  p.fragment Will it ever support rx.js?
  p.fragment ...even if you need it?
  p.fragment Will it ever support what you need <u><em>now</em></u>?

section
  h1 Final words
  p.embox.roll-in.fragment
    | You should never wait for the ECMA committee,
    br
    | browser vendors or some compiler writer
    br
    | to extend your programming language
  p.roll-in.fragment <b>You</b> should add the features <b>you</b> need to your language
  p.roll-in.fragment It should take only a handful of lines of code
  p.embox.roll-in.fragment
    | If you cannot do it,
    br
    | <b>you are using the wrong language!</b>


section
  h1 That's All, Folks
  h1
    veryBig Metascript
  h2 is waiting for you!
  p code, docs and slides are on github
  p twitter: @M_a_s_s_i, #metascript
  p group: metascript@googlegroups.com
  h2 Thanks for following!
