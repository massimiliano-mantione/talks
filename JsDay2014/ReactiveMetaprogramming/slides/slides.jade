link(rel="stylesheet", href="assets/style.css")
link(rel="stylesheet", href="assets/highlight.css")
script(src="assets/highlight.min.css")

section
  div.logo
    img(src='assets/jsday.png', alt='logo')
  h2 Monads, Promises,
  h3 and
  h1 Reactive Metaprogramming!
  p.dateStyle May 15 2014, Verona
  p Massimiliano Mantione
  p
    em (Hyperfair CTO)


section
  h1 Stop the buzzwords

  p.fragment
    em Honestly, I fear will not see
    br
    em a <b>lot</b> of new things in this talk
  p.embox.roll-in.fragment
    | However, I hope to inspire you new ideas
    br
    | on how code can be written

section
  h1
    | Who fears
    br
    | callback hell?

  p.fragment This talk is mostly about <b>async</b> programming
  p.fragment
    em (the other half is about <b>metaprogramming</b>)
  p.fragment We all know <b>async</b> is hard in "pure" Javascript
  p.embox.roll-in.fragment Do we?
  p.fragment
    b Let's see...



section
  h1 Think differently

  p.fragment
    | The <em>easiest</em> way make an API asynchronous
    br
    | is to get a <b>callback</b> as argument
  p.embox.roll-in.fragment But this matters <em>nothing</em>!
  p.fragment We think that the problem is the nesting of <em><u>callbacks</u></em>...
  p.embox.roll-in.fragment But it is the <em><u>nesting</u></em> of callbacks!


section
  section
    h1
      veryBig Nesting

  section
    h1 Did you know...

    p.fragment That also synchronous code can suffer from nesting?
    pre.codebox.fragment
      code.javascript.
        writeFiles(
          resizeImages(
            readFiles(
              listFiles(directoryName))));

  section
    h1 The root of the problem

    p.fragment Nested expressions are unreadable
    p.fragment A nested expression is a complex one
    p.fragment A complex expression is a deep tree
    p.embox.roll-in.fragment Usually what we want is a <em>single</em> path in the tree!

  section
    h1 Be pragmatic

    p.fragment Parenthesis must be nested
    p.fragment Representing tree levels with parenthesis produces nesting
    p.fragment A single tree path is like a linked chain
    p.fragment Binary, left-associative infix operators can be chained
    p.fragment
      | The "<b>.</b>" operator links very versatile entities
      br
      | (objects and properties)

  section
    h1 Let's think...

    p
      | Remember: the "<b>.</b>" operator links very versatile entities
      br
      | (objects and properties)
    p.fragment Let's build <b>objects</b> that represent the steps in the chain!
    p.fragment Every object will have a method that returns the next step in the chain...

  section
    h1 Enter the
    h1
      veryBig Flowing API!
    pre.codebox.fragment
      code.javascript.
        listFiles(directoryName)
          .readFiles()
          .resizeImages()
          .writeFiles();
    p.fragment
      b This usually works well, but...

  section
    h1 Is there a
    h1
      veryBig simpler
    h1 way?

section
  section
    h2 Expression
    h1
      veryBig Trees!
    p.fragment
      em Let's see how the language
      br
      em can help us
      br
      em "straightening" trees
    p.fragment

  section
    h1 Sounds scary?
    p.fragment <b>It is</b>: write the wrong macro and your code will become an unreadable mess
    p.embox.roll-in.fragment
      em With great power comes great responsibility
    p.fragment Macros give you superpowers
    p.embox.roll-in.fragment
      b Would you really give up superpowers
      br
      b because you don't want the responsibility?

    p.fragment
      em Let's revisit callback hell


section
  section
    h1
      veryBig Monads

  section
    h1 Monadic sequencing

    p.embox.roll-in.fragment Does anybody understand monads?
    p.fragment <b><em>No?</em></b>
    p.embox.roll-in.fragment <b><u>Neither do I!</u></b>
    p.fragment
      | Please watch the talk
      br
      em "Monads and Gonads"
      br
      | by Douglas Crockford

  section
    h1 Monads for dummies

    p.fragment Suppose you want to compute result <b>r</b> from value <b>v</b> applying functions <b>f1</b>, <b>f2</b> and <b>f3</b>
    pre.codebox.fragment
      code.javascript.
        r = f3 (f2 (f1 (v)));
    p.fragment <em>(note the nesting)</em>
    p.fragment
      | You could represent the intermediate values explicitly:
      br
      | <b>v1</b> and <b>v2</b>
    pre.codebox.fragment
      code.javascript.
        v1 = f1 (v);
        v2 = f2 (v1);
        r  = f3 (v2);
    p.fragment <em>(note: no nesting!)</em>
    p.fragment <b>But lots of clutter...</b>


  section
    h1 Monads for dummies

    p.fragment You could build a flowing API...
    pre.codebox.fragment
      code.javascript.
        r = v.f1().f2().f3();
    p.fragment ...or you could have a "monadic sequencing" notation:
    pre.codebox.fragment
      code.javascript.
        r = on v do
          f1
          f2
          f3
    p.fragment <em>(note: this is not Javascript)</em>

  section
    h1 Monads for dummies

    p.fragment Monads are objecs that encapsulate a function
    p.fragment Actually, they represent the (future?) result of applying that function
    p.fragment They can be linked to other monads, which represent the input and result of the function...
    p.embox.roll-in.fragment Does this ring a bell?


section
  section
    h1
      veryBig Promises!

  section
    h1 Go async with promises

    p.fragment Remember that each step in the chain represents an intermediate value
    pre.codebox.fragment
      code.javascript.
        listFiles(directoryName)
          .then(readFiles)
          .then(resizeImages)
          .then(writeFiles);

  section
    h1 What about failure?

    p.fragment Let's add something to our previous example
    pre.codebox.fragment
      code.javascript.
        listFiles(directoryName)
          .then(readFiles)
          .then(resizeImages)
          .then(writeFiles)
          .fail(handleError)
    p.fragment What does the final <b>fail</b> invocation add?
    p.fragment
      | The expression is a list,
      br
      | but what about the flow of values?


  section
    h1 Nonlinear graphs!
    p.fragment This is the graph of intermediate values:
    pre.codebox.fragment
      code.javascript.
        // directoryName --------\
        //       |               |
        // listFiles ------------+
        //       |               |
        // readFiles ------------+
        //       |               |
        // resizeImages ---------+
        //       |               |
        // writeFiles        handleError
    p.fragment As you can see, this is not a simple chain of values!
    p.fragment
      em However, it can be represented as a list
      br
      em because of a <b>"try-catch"</b> trick


section
  section
    h1 What about
    h1
      veryBig Rx.Js?

    p.fragment An <b>observable</b> can do one of three things:
      ul
        li.fragment Produce values: <b>onNext</b>
        li.fragment Terminate: <b>onCompleted</b>
        li.fragment Fail: <b>onError</b>


  section
    h1 The rx.js graph
    pre.codebox.fragment
      code.javascript.
        // observable -----+----------\
        //     |           |          |
        //   filter -------+----------+
        //     |           |          |
        //  throttle ------+----------+
        //     |           |          |
        //    map ---------+----------+
        //     |           |          |
        //   onNext   onCompleted  onError
    p.fragment Like a monad, with three functions...

  section
    h1 Rx.Js is different
    p.fragment
      b It adds some <em>real</em> value over promises
    p.fragment Promises frameworks lack the comprehensive set of operations on flowing values that Rx.Js has
    p.fragment Moreover, promises can fire only once, while observables are more like node.js streams
    p.fragment
      em Of course, ES6 and ES7 will support <b>Promises</b> and not <b>Rx.Js</b>
    p.embox.roll-in.fragment Let's look at some code!


section
  section
    h1 Final thoughts
    p.fragment The problem is the <b>nesting</b> and not the callbacks
    p.fragment
      em (a verbose syntax <b>is</b> annoying anyway)
    p.fragment Promises give you linear code, but they require a global API conversion
    p.fragment
      | A smarter language can give you linear code with <b>any</b> API
      br
      em (Promises, Rx.Js, or plain callbacks)

  section
    h1 Other techniques
    p.fragment
      | Rx.Js adds real value, but will it ever be supported by Javascript?
      br
      em (think <em>async</em> in ES7)
    p.fragment
      b Don't forget generators and coroutines!
    p.embox.roll-in.fragment
      | But... when will we have
      br
      | <em>migratable</em> coroutines?

section
  h1 That's All, Folks
  h1
    veryBig Metascript
  h2 is waiting for you!
  p code, docs and slides are on github
  p twitter: @M_a_s_s_i, #metascript
  p group: metascript@googlegroups.com
  h2 Thanks for following!
